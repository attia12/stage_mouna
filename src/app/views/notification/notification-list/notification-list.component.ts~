import {Component, OnDestroy, OnInit} from '@angular/core';
import {Subject} from "rxjs";
import {FormBuilder, FormGroup} from "@angular/forms";
import {
  Notification,
  NotificationFilter,
  NotificationStatus,
  NotificationType,
  Priority,
  PagedResponse
} from '../../../models/notification.model';
import {NotificationService} from "../../../services/notification.service";
import {debounceTime, takeUntil} from "rxjs/operators";

@Component({
  selector: 'app-notification-list',

  templateUrl: './notification-list.component.html',
  styleUrls: ['./notification-list.component.scss'],
  standalone: false
})
export class NotificationListComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();

  notifications: Notification[] = [];
  totalElements = 0;
  currentPage = 1;
  pageSize = 20;
  loading = false;

  filterForm: FormGroup;

  // Enum references for template
  NotificationStatus = NotificationStatus;
  NotificationType = NotificationType;
  Priority = Priority;

  // Filter options
  statusOptions = Object.values(NotificationStatus);
  typeOptions = Object.values(NotificationType);
  priorityOptions = Object.values(Priority);

  constructor(
      private notificationService: NotificationService,
      private fb: FormBuilder
  ) {
    this.filterForm = this.createFilterForm();
  }

  ngOnInit(): void {
    this.loadNotifications();
    this.setupFilterSubscription();
    this.subscribeToNewNotifications();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private createFilterForm(): FormGroup {
    return this.fb.group({
      status: [null],
      type: [null],
      priority: [null],
      startDate: [null],
      endDate: [null],
      sortBy: ['createdAt'],
      sortDirection: ['DESC']
    });
  }

  private setupFilterSubscription(): void {
    this.filterForm.valueChanges
        .pipe(
            debounceTime(500),
            takeUntil(this.destroy$)
        )
        .subscribe(() => {
          this.currentPage = 1;
          this.loadNotifications();
        });
  }

  private subscribeToNewNotifications(): void {
    this.notificationService.notification$
        .pipe(takeUntil(this.destroy$))
        .subscribe(notification => {
          // Add new notification to the top of the list
          this.notifications.unshift(notification);
          this.totalElements++;
        });
  }

  loadNotifications(): void {
    this.loading = true;

    const filter: NotificationFilter = {
      ...this.filterForm.value,
      page: this.currentPage - 1,
      size: this.pageSize
    };

    this.notificationService.getNotifications(filter)
        .subscribe({
          next: (response: PagedResponse<Notification>) => {
            this.notifications = response.content;
            this.totalElements = response.totalElements;
            this.loading = false;
          },
          error: (error) => {
            console.error('Error loading notifications:', error);
            this.loading = false;
          }
        });
  }

  markAsRead(notification: Notification): void {
    if (notification.status === NotificationStatus.UNREAD) {
      this.notificationService.markAsRead(notification.id)
          .subscribe({
            next: (updated) => {
              notification.status = NotificationStatus.READ;
              notification.readAt = updated.readAt;
            },
            error: (error) => {
              console.error('Error marking as read:', error);
            }
          });
    }
  }

  markAllAsRead(): void {
    this.notificationService.markAllAsRead()
        .subscribe({
          next: () => {
            this.notifications.forEach(n => {
              if (n.status === NotificationStatus.UNREAD) {
                n.status = NotificationStatus.READ;
                n.readAt = new Date();
              }
            });
          },
          error: (error) => {
            console.error('Error marking all as read:', error);
          }
        });
  }

  onPageChange(page: number): void {
    this.currentPage = page;
    this.loadNotifications();
  }

  resetFilters(): void {
    this.filterForm.reset({
      sortBy: 'createdAt',
      sortDirection: 'DESC'
    });
  }

  getPriorityClass(priority: Priority): string {
    switch (priority) {
      case Priority.URGENT:
        return 'badge-danger';
      case Priority.NORMAL:
        return 'badge-warning';
      case Priority.LOW:
        return 'badge-success';
      default:
        return 'badge-secondary';
    }
  }

  getStatusClass(status: NotificationStatus): string {
    return status === NotificationStatus.UNREAD ? 'badge-primary' : 'badge-secondary';
  }

  getTypeIcon(type: NotificationType): string {
    switch (type) {
      case NotificationType.ALERT:
        return 'i-Warning-Window';
      case NotificationType.TASK:
        return 'i-Check';
      case NotificationType.INFO:
        return 'i-Information';
      default:
        return 'i-Bell';
    }

}

  protected readonly Math = Math;
}
